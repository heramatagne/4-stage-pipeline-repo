AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This CF template create an Ec2 in a customize VPC and a SG.

Parameters:
  VpcId:
    Type: String
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    # Default: "vpc-05abd1518e2eb8581"
  SubnetID: 
    Description: "SubnetId in VPC"
    Type: String
  InstanceType:
    Description: EC2 instance type.
    Type: String
    Default: t3.micro    
  KeyName:
    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.
    Type: AWS::EC2::KeyPair::KeyName
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      SubnetId: !Ref SubnetID
      Tags: 
        - Key: "Name"
          Value: "ec2-launched-with-codepipeline"        
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<html><body><h1>Hello from Server in ${AWS::Region}<h1></body></html>" > /var/www/html/index.html
  WebServerSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Enable HTTP access via port 80 + SSH access'
      VpcId:
         Ref: VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
        - CidrIp: !Ref SSHLocation
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'

Outputs:
  PublicIp:
    Description: InstanceId of the newly created EC2 instance
    Value: !GetAtt WebServer.PublicIp
    Export: 
      Name: !Sub "${AWS::StackName}-PublicIp"     
  EC2DNSName:
    Description: EC2 DNS
    Value: !GetAtt WebServer.PublicDnsName
    Export: 
      Name: !Sub "${AWS::StackName}-EC2DNSName" 